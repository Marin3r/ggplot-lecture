% Introduction to ggplot2
% Author: Karthik Ram, karthik.ram@gmail.com
% Licence, CC-BY
\documentclass{beamer}
\usepackage{listings}
\usepackage{inconsolata}
\setbeamertemplate{frametitle}[default][center]
\usepackage{url}
\usetheme{Amsterdam}
% --------------------------------------------------------------
<<setup, include=FALSE>>=
opts_chunk$set(cache=TRUE, message=FALSE)
# smaller font size for chunks
opts_chunk$set(size = 'footnotesize')
@

% --------------------------------------------------------------

<<echo=FALSE>>=
options(width=60)
@

\begin{document}
\title{Data Visualization with R \& ggplot2}
\author{Karthik Ram}
\maketitle

% --------------------------------------------------------------
\begin{frame}[fragile]
\frametitle{Download this PDF}\footnote{git clone \url{git@github.com:karthikram/ggplot-lecture.git}}
\begingroup
    \fontsize{20pt}{12pt}\selectfont
\href{http://github.com/karthikram/ggplot-lecture}{github.com/karthikram/ggplot-lecture}
\endgroup
\end{frame}
% --------------------------------------------------------------
% Template
\begin{frame}[fragile]
\frametitle{Base graphics}
\begin{itemize}
\item Ugly, laborious, and verbose\\
\item There are better ways to describe statistical visualizations.\\
\end{itemize}
\end{frame}

% --------------------------------------------------------------
% Template
\begin{frame}[fragile]
\frametitle{Why \texttt{ggplot2}?}
\begin{itemize}
\item Follows a grammar, just like any language.
\item It defines basic components that make up a sentence. In this case, the grammar defines components in a plot.
\item Grammar of graphics originally coined by Lee Wilkinson
\end{itemize}
\end{frame}


% --------------------------------------------------------------
% Template
\begin{frame}[fragile]
\frametitle{Why \texttt{ggplot2}?}
\begin{itemize}
\item  Supports a continuum of expertise.
\item Get started right away but with practice you can effortless build complex, publication quality figures.
\end{itemize}
\end{frame}

% --------------------------------------------------------------
\section{Basics}
\frame{\sectionpage}

% Template
\begin{frame}[fragile]
\frametitle{Some terminology}
\begin{itemize}
\item \texttt{ggplot} - The main function where you specify the dataset and variables to plot\\
\item \textbf{geoms} - geometric objects
    \begin{itemize}
    \item geom\_point(), geom\_bar(), geom\_density(), geom\_line(), geom\_area()
    \end{itemize}
\item \textbf{aes} -  aesthetics
        \begin{itemize}
    \item shape, transparency, color, fill.
    \end{itemize}
\item \textbf{scales}  Define how your data will be plotted
        \begin{itemize}
    \item \emph{continuous}, \emph{discrete}, \emph{log}
    \end{itemize}
\end{itemize}
\end{frame}



\section{Assembling your first ggplot}
\frame{\sectionpage}

% --------------------------------------------------------------
% Template
\begin{frame}[fragile]
\frametitle{The iris dataset}
<<some_data, tidy=FALSE, echo=TRUE>>=
head(iris)
@
\end{frame}

% --------------------------------------------------------------
% Template
\begin{frame}[fragile]
\frametitle{Let's try an example}
<<first_plot , fig.width=6, fig.height=4, out.width='.75\\linewidth', fig.show='hold',  tidy=FALSE>>=
ggplot(data = iris, aes(x= Sepal.Length, y= Sepal.Width)) +
geom_point()
@
\end{frame}

% --------------------------------------------------------------
% Template
\begin{frame}[fragile]
\frametitle{Basic structure}
<<first_plotb , eval=FALSE, tidy=FALSE>>=
ggplot(data = iris, aes(x= Sepal.Length, y= Sepal.Width))
 + geom_point()
myplot <- ggplot(data = iris, aes(x= Sepal.Length, y= Sepal.Width))
myplot + geom_point()
 @
\begin{itemize}
\item Specify the data and variables inside the \texttt{ggplot} function. Anything else that goes in here \item becomes a global setting.
\item Then add layers of geometric objects, statistical models, and panels.
\end{itemize}
\end{frame}
% --------------------------------------------------------------
% Template
\begin{frame}[fragile]
\frametitle{Increase the size of points}
<<first_plot_size , fig.width=6, fig.height=4, out.width='.75\\linewidth', fig.show='hold',  tidy=TRUE>>=
ggplot(data = iris, aes(x= Sepal.Length, y= Sepal.Width)) +
geom_point(size = 3)
@
\end{frame}

% --------------------------------------------------------------
% Template
\begin{frame}[fragile]
\frametitle{Add some color}
<<first_plot_color , fig.width=6, fig.height=4, out.width='.75\\linewidth', fig.show='hold',  tidy=FALSE>>=
ggplot(iris, aes(Sepal.Length, Sepal.Width, color = Species)) +
geom_point(size = 3)
@
\end{frame}

% --------------------------------------------------------------
% Template
\begin{frame}[fragile]
\frametitle{Also differentiate points by shape}
<<first_plot_shape , fig.width=6, fig.height=4, out.width='.75\\linewidth', fig.show='hold',  tidy=FALSE>>=
ggplot(data = iris, aes(x= Sepal.Length, y= Sepal.Width, color = Species)) +
geom_point(aes(shape = Species), size = 3)
@
\end{frame}

\section{Exercise 1}
\frame{\sectionpage}

% --------------------------------------------------------------
\begin{frame}[fragile]
Make the following plot.\\
Use the airquality dataset and generate a scatter plot of the year against xxx.\\
Then increase the size of the points.

\end{frame}

% --------------------------------------------------------------
\section{Histograms}
\frame{\sectionpage}

% --------------------------------------------------------------
\begin{frame}[fragile]
See \texttt{geom\_histogram} for list of options
<<histogr , fig.width=6, fig.height=4, out.width='.75\\linewidth', fig.show='hold',  tidy=FALSE>>=
h <- ggplot(faithful, aes(x=waiting))
h + geom_histogram(binwidth=8, fill="white", colour="black", origin=31)
@
\end{frame}

% --------------------------------------------------------------
\begin{frame}[fragile]
<<histogrm , fig.width=6, fig.height=4, out.width='.75\\linewidth', fig.show='hold',  tidy=FALSE>>=
h <- ggplot(faithful, aes(x=waiting))
h + geom_histogram(binwidth=2, fill="white", colour="black")
@
\end{frame}

% --------------------------------------------------------------
\begin{frame}[fragile]
<<histogra , fig.width=6, fig.height=4, out.width='.75\\linewidth', fig.show='hold',  tidy=FALSE>>=
h <- ggplot(faithful, aes(x=waiting))
h + geom_histogram(binwidth=8, fill="steelblue", colour="black", origin=31)
@
\end{frame}

% --------------------------------------------------------------
\section{Line plots}
\frame{\sectionpage}

\begin{frame}[fragile]
Now we can vary the gear size.
<<linea , fig.width=6, fig.height=4, out.width='.75\\linewidth', fig.show='hold',  tidy=FALSE>>=
climate <- read.csv('~/Github/ggplot2-lecture/climate.csv', header = T)
ggplot(climate, aes(Year, Anomaly10y)) +
geom_line()
@
\end{frame}

\begin{frame}[fragile]
We can also plot confidence regions
<<lineb , fig.width=6, fig.height=4, out.width='.75\\linewidth', fig.show='hold',  tidy=FALSE>>=
climate <- read.csv('~/Github/ggplot2-lecture/climate.csv', header = T)
ggplot(climate, aes(Year, Anomaly10y)) + geom_ribbon(aes(ymin=Anomaly10y-Unc10y, ymax=Anomaly10y+Unc10y), fill="blue", alpha=.1) +
geom_line(color="steelblue")
@
\end{frame}


% --------------------------------------------------------------
\section{Bar plots}
\frame{\sectionpage}

\begin{frame}[fragile]
<<barone , fig.width=6, fig.height=4, out.width='.75\\linewidth', fig.show='hold',  tidy=FALSE>>=
ggplot(iris, aes(Species, Sepal.Length)) +
geom_bar(stat="identity", postiion = "dodge")
@
\end{frame}

% --------------------------------------------------------------
\section{plyr and reshape}
\frame{\sectionpage}

\begin{frame}[fragile]
<<bartwo , fig.width=6, fig.height=4, out.width='.75\\linewidth', fig.show='hold',  tidy=FALSE>>=
df  <- melt(iris, measured.vars="Species")
ggplot(df, aes(Species, value, fill = variable)) +
geom_bar(stat="identity")
@
\end{frame}

\begin{frame}[fragile]
<<bartwodata , fig.width=6, fig.height=4, out.width='.75\\linewidth', fig.show='hold',  tidy=FALSE>>=
iris[1:2, ]
df  <- melt(iris, measured.vars="Species")
df[1:2, ]
@
\end{frame}


\begin{frame}[fragile]
<<barthree , fig.width=6, fig.height=4, out.width='.75\\linewidth', fig.show='hold',  tidy=FALSE>>=
ggplot(df, aes(Species, value, fill = variable)) +
geom_bar(stat="identity", position="dodge")
@
\end{frame}

% --------------------------------------------------------------
\section{Exercise 2}
\frame{\sectionpage}

\begin{frame}[fragile]
Take a dataset and make both a stacked bar chart and a dodged bar chart.
\end{frame}

% --------------------------------------------------------------
\section{Density Plots}
\frame{\sectionpage}

\begin{frame}[fragile]
<<densityone , eval=FALSE, fig.width=6, fig.height=4, out.width='.75\\linewidth', fig.show='hold',  tidy=FALSE>>=
ggplot(faithful, aes(waiting)) + geom_density()
ggplot(faithful, aes(waiting)) +
geom_density(fill = "blue", alpha = 0.1)
@
\end{frame}

\begin{frame}[fragile]
<<densitytwo , , fig.width=6, fig.height=4, out.width='.75\\linewidth', fig.show='hold',  tidy=FALSE>>=
ggplot(faithful, aes(waiting)) +
geom_line(stat="density", fill="blue")
@
\end{frame}

% --------------------------------------------------------------
\section{Exercise 2}
\frame{\sectionpage}

% --------------------------------------------------------------
\section{Exercise 3}
\frame{\sectionpage}

% --------------------------------------------------------------
\section{Exercise 4}
\frame{\sectionpage}

% --------------------------------------------------------------
\section{Mapping Variables to Colors}
\frame{\sectionpage}


\begin{frame}[fragile]
\frametitle{Colors}
<<color_list, eval = TRUE, fig.width=4, fig.height=3, out.width='.75\\linewidth'>>=
library(RColorBrewer)
display.brewer.all()
@
\end{frame}

\begin{frame}[fragile]
\frametitle{Colors}
<<color_list2, eval = FALSE, fig.width=4, fig.height=6, out.width='.75\\linewidth'>>=
aes(color = variable)
aes(color = "black")
# Or add it as a scale
scale_fill_manual(values = c("color1", "color2"))
@
\end{frame}


\begin{frame}[fragile]
\frametitle{Refer to a color chart for beautful visualizations}
\url{http://tools.medialab.sciences-po.fr/iwanthue/}
\includegraphics[scale=0.25]{images/color_schemes.png}
\end{frame}





\section{Faceting}
\frame{\sectionpage}

\begin{frame}[fragile]
\frametitle{Faceting along columns}
<<facetgrid1, eval = TRUE, fig.width=4, fig.height=3, out.width='.75\\linewidth'>>=
ggplot(iris, aes(Sepal.Length, Sepal.Width, color = Species)) + geom_point() +
facet_grid(Species ~ .)
@
\end{frame}

\begin{frame}[fragile]
\frametitle{and along rows}
<<facet_grid2, eval = TRUE, fig.width=4, fig.height=3, out.width='.75\\linewidth'>>=
ggplot(iris, aes(Sepal.Length, Sepal.Width, color = Species)) + geom_point() +
facet_grid(. ~ Species)
@
\end{frame}

\begin{frame}[fragile]
\frametitle{Colors}
<<facet_wrap, eval = TRUE, fig.width=4, fig.height=3, out.width='.75\\linewidth'>>=
ggplot(iris, aes(Sepal.Length, Sepal.Width, color = Species)) + geom_point() +
facet_wrap( ~ Species)
@
\end{frame}


% --------------------------------------------------------------
\section{Themes}
\frame{\sectionpage}

\begin{frame}[fragile]
\frametitle{Adding themes}
<<theme_list, eval = FALSE, fig.width=4, fig.height=6, out.width='.75\\linewidth'>>=
theme()
# see ?theme() for more options
@

\end{frame}
\begin{frame}[fragile]
\frametitle{Adding themes}
<<facet_wrap_themes, eval = TRUE, fig.width=2, fig.height=3, out.width='.75\\linewidth'>>=
ggplot(iris, aes(Sepal.Length, Sepal.Width, color = Species)) + geom_point(size= 2.5, shape = 16) +
facet_wrap( ~ Species) +
theme(legend.key=element_rect(fill=NA), legend.position="bottom", strip.background=element_rect(fill=NA), strip.text=element_text(size=25), axis.title.y=element_text(angle=0))
@
\end{frame}

\begin{frame}[fragile]
\frametitle{Adding themes}
<<facet_wrap_options, eval = TRUE, fig.width=4, fig.height=6, out.width='.75\\linewidth'>>=
ggplot(iris, aes(Sepal.Length, Sepal.Width, color = Species)) + geom_point(size=2.5, shape=16) + facet_wrap( ~ Species) + theme(legend.key=element_rect(fill=NA), legend.position="bottom", strip.background=element_rect(fill=NA), strip.text=element_text(size=25), axis.title.y=element_text(angle=0))
@
\end{frame}

% --------------------------------------------------------------
\section{Scales}
\frame{\sectionpage}

% Template
\begin{frame}[fragile]
\frametitle{title}
If the plot is on your screen
<<scale_1, eval = FALSE, out.width='.75\\linewidth'>>=
dd <- ggplot(iris, aes(Sepal.Length, Sepal.Width, color = Species)) + geom_point(size=4, shape=16) +
facet_grid(. ~Species)
dd +
scale_y_continuous(breaks=seq(2, 8,by = 1), labels=paste0(2:8, " cm"))
@
\end{frame}

% Template
\begin{frame}[fragile]
\frametitle{title}
If the plot is on your screen
<<scale_2, eval = FALSE, out.width='.75\\linewidth'>>=
# code
@
\end{frame}

% Template
\begin{frame}[fragile]
\frametitle{title}
If the plot is on your screen
<<scale_3, eval = FALSE, out.width='.75\\linewidth'>>=
# code
@
\end{frame}

% Template
\begin{frame}[fragile]
\frametitle{title}
If the plot is on your screen
<<scale_4, eval = FALSE, out.width='.75\\linewidth'>>=
# code
@
\end{frame}


% --------------------------------------------------------------
\section{Publication quality figures}
\frame{\sectionpage}

% How to save your plots
\begin{frame}[fragile]
\frametitle{Making publication quality figures with \texttt{ggplot2}}
If the plot is on your screen
<<pub0, eval = FALSE, out.width='.75\\linewidth'>>=
ggsave('~/path/to/figure/filename.png')
@
If your plot is assigned to an object
<<pub1, eval = FALSE, out.width='.75\\linewidth'>>=
ggsave(plot1, '~/path/to/figure/filename.png')
@

Specify a size
<<pub2, eval = FALSE, out.width='.75\\linewidth'>>=
ggsave("~/path/to/figure/filename.png", width = 6, height =4)
@
or any format (pdf, png, eps, jpg)
<<pub3, eval = FALSE, out.width=".75\\linewidth">>=
ggsave("~/path/to/figure/filename.eps")
ggsave("~/path/to/figure/filename.jpg")
ggsave("~/path/to/figure/filename.pdf")
@

\end{frame}

% % --------------------------------------------------------------
% % Faceting
\begin{frame}[fragile]
\frametitle{Faceting}
Splitting Data into Subplots with Facets \\
Use \texttt{facet\_wrap()} or \texttt{facet\_grid()}
<<facets0, eval = FALSE, out.width='.75\\linewidth'>>=
p <- ggplot(mpg, aes(x=displ, y=hwy)) + geom_point()
p + facet_grid(drv ~ .)
@
or horizontally
<<facets1, eval = FALSE, out.width='.75\\linewidth'>>=
p <- ggplot(mpg, aes(x=displ, y=hwy)) + geom_point()
p + facet_grid(.~ drv)
@
\end{frame}

% % Template
\begin{frame}[fragile]
\frametitle{Faceting}
<<facets2, eval = TRUE, out.width='.55\\linewidth'>>=
p <- ggplot(mpg, aes(x=displ, y=hwy)) + geom_point()
p + facet_grid(drv ~ .)
@
\end{frame}

% % Template
\begin{frame}[fragile]
\frametitle{Faceting}
<<facets3, eval = TRUE, out.width='.55\\linewidth'>>=
p <- ggplot(mpg, aes(x=displ, y=hwy)) + geom_point()
p + facet_grid(. ~ drv)
@
\end{frame}



% --------------------------------------------------------------
% Template
\begin{frame}[fragile]
\frametitle{title}
If the plot is on your screen
<<chunk_XXXXX, eval = FALSE, out.width='.75\\linewidth'>>=
# code
@
\end{frame}




% --------------------------------------------------------------
% end, hope it was useful.
\end{document}
